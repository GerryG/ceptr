#!/usr/local/bin/perl

# This file generates c code that defines system semantic definitions.
# it reads the file "base_defs" as a source file for creating the definitions
#
# Copyright (C) 2013-2015, The MetaCurrency Project (Eric Harris-Braun, Arthur Brock, et. al).  This file is part of the Ceptr platform and is released under the terms of the license contained in the file LICENSE (GPLv3).

use strict;
use warnings;
use Data::Dumper;

my $defs_file = 'base_defs';
open(my $fh,'<:encoding(UTF-8)', $defs_file)
        or die "Could not open definitions source file '$defs_file' $!";
my $defs_c_file = 'base_defs.c';
open(my $cfh,'>:encoding(UTF-8)', $defs_c_file)
        or die "Could not open definitions c file '$defs_c_file' $!";
my $defs_h_file = 'base_defs.h';
open(my $hfh,'>:encoding(UTF-8)', $defs_h_file)
        or die "Could not open definitions c file '$defs_h_file' $!";

my %c;
my @d;
my %fmap = ('Structure'=>'sT','Symbol'=>'sY','Process'=>'sP');
my $context = "SYS";

while (my $def = <$fh>) {
    chomp $def;
    next if ($def =~ /^ *#/);       # ignore comments
    next if ($def) =~ /^[ \t]*$/;   #ignore whitespace lines
    if ($def =~ /(.*): *(.*);(.*)/) {
        my $type = $1;
        if ($type eq 'Context') {$context = $2;next;}

        my @params = split /,/,$2;
        #        my $name = shift @params;
        push @d,[$type,$context.'_CONTEXT',@params];
        my $comment = $3;

        if (! exists $c{$context}) {$c{$context} = {}};

        my $defs = $c{$context};

        if (! exists $defs->{$type}) {$defs->{$type} = []};

        my $a = $defs->{$type};
        push @$a, [@params];
    } else {
        die "unable to parse $def";
    }
}
#print Dumper(\@d);
#print $fmap{'Symbol'};

print $cfh <<'EOF';
/**
 * @ingroup def
 *
 * @file base_defs.c
 * @brief auto-generated system definitions
 *
 * NOTE: this file is auto-generated by base_defs.pl
 *
 * @copyright Copyright (C) 2013-2015, The MetaCurrency Project (Eric Harris-Braun, Arthur Brock, et. al).  This file is part of the Ceptr platform and is released under the terms of the license contained in the file LICENSE (GPLv3).
 */

#include "base_defs.h"
#include "sys_defs.h"
#include "def.h"

void base_defs() {
EOF
foreach my $s (@d) {
    my @x = @$s;
    my $n = shift @x;
    my $p = join(',',@x);
    print $cfh "  $fmap{$n}($p);\n";
}

print $cfh <<EOF;
}
EOF


print $hfh <<'EOF';
/**
 * @ingroup def
 *
 * @file base_defs.h
 * @brief auto-generated system definitions
 *
 * NOTE: this file is auto-generated by base_defs.pl
 *
 * @copyright Copyright (C) 2013-2015, The MetaCurrency Project (Eric Harris-Braun, Arthur Brock, et. al).  This file is part of the Ceptr platform and is released under the terms of the license contained in the file LICENSE (GPLv3).
 */

#ifndef _CEPTR_BASE_DEFS_H
#define _CEPTR_BASE_DEFS_H
#include "sys_defs.h"

void base_defs();
EOF

&hout("SYS","Symbol");
&hout("SYS","Structure");
&hout("SYS","Process");
&hout("TEST","Symbol");
&hout("LOCAL","Symbol");

sub hout {
    my $context = shift;
    my $type = shift;
    my $types = $type eq "Process" ? "Processes" : $type."s";

    my $defs = $c{$context};
    my $a = $defs->{$type};
    print $hfh <<EOF;

/**********************************************************************************/
// $context:$type
enum $context${\($type)}IDs {
    NULL_${\(($context ne 'SYS' ? $context.'_' : '').uc($type))}_ID,
EOF
    foreach my $s (@$a) {
        print $hfh '    '.$s->[0]."_ID,\n";

    }
    print $hfh '    NUM_'.$context.'_'.uc($types)."\n};\n";
    foreach my $s (@$a) {
        print $hfh '#define '.$s->[0]." G_contexts[$context"."_CONTEXT].".lc($types).'['.$s->[0]."_ID]\n";
    }
}
print $hfh <<EOF;

#endif
EOF
