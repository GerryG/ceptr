########################################################################################
Context: SYS;

Structure: BIT,1,NULL_SYMBOL;
Structure: INTEGER,1,NULL_SYMBOL;
Structure: FLOAT,1,NULL_SYMBOL;
Structure: CHAR,1,NULL_SYMBOL;
Structure: CSTRING,1,NULL_SYMBOL;
Structure: SYMBOL,1,NULL_SYMBOL;
Structure: ENUM,1,NULL_SYMBOL;
Structure: TREE_PATH,1,NULL_SYMBOL;
Structure: XADDR,1,NULL_SYMBOL;
Structure: LIST,1,NULL_SYMBOL;
Structure: SURFACE,1,NULL_SYMBOL;
Structure: TREE,1,NULL_SYMBOL;
Structure: RECEPTOR,1,NULL_SYMBOL;
Structure: PROCESS,1,NULL_SYMBOL;
Structure: STRUCTURE,1,NULL_SYMBOL;
Structure: SCAPE,1,NULL_SYMBOL;
Structure: SEMTREX,1,NULL_SYMBOL;
Structure: STREAM,1,NULL_SYMBOL;

Symbol: DEFINITIONS,LIST;
Symbol: STRUCTURES,LIST;
Symbol: STRUCTURE_DEFINITION,TREE;
Symbol: STRUCTURE_LABEL,CSTRING;
Symbol: STRUCTURE_PARTS,LIST;
Symbol: STRUCTURE_PART,SYMBOL;
Symbol: SYMBOLS,LIST;
Symbol: SYMBOL_DECLARATION,TREE;
Symbol: SYMBOL_STRUCTURE,STRUCTURE;
Symbol: SYMBOL_LABEL,CSTRING;

Symbol: BOOLEAN,BIT;
Symbol: SEMTREX_MATCH_PATH,TREE_PATH;       Path to symbol matched by semtrex
Symbol: SEMTREX_SYMBOL_LITERAL,TREE;        This system symbol matches on the semantic type.
Symbol: SEMTREX_SYMBOL_LITERAL_NOT,TREE;    Match any symbol or value of the node except.
Symbol: SEMTREX_SYMBOL_SET,LIST;
Symbol: SEMTREX_SYMBOL,SYMBOL;              Symbols in the literal set
Symbol: SEMTREX_SEQUENCE,LIST;              Match on a sequence of child nodes which are any valid semtrex's.  Ex: comma separated nodes
#///@todo, this really should be something like SEMTREX_PAIR
Symbol: SEMTREX_OR,SEMTREX;                 Logical OR between two Semtrex expressions.      Ex: |
Symbol: SEMTREX_NOT,SEMTREX;                Logical ~ between of a Semtrex expressions.      Ex: ~
Symbol: SEMTREX_SYMBOL_ANY,NULL_STRUCTURE;  Match any symbol or value of the node.           Ex: .
Symbol: SEMTREX_ZERO_OR_MORE,SEMTREX;       Requires one child Semtrex and matches on zero or more of that Semtrex.  Ex: /0/TestSemtrex*
Symbol: SEMTREX_ONE_OR_MORE,SEMTREX;        Requires one child Semtrex and matches on one or more of that Semtrex.   Ex: /0/TestSemtrex+
Symbol: SEMTREX_ZERO_OR_ONE,SEMTREX;        Requires one child Semtrex and matches on zero or one of that Semtrex.   Ex: /0/TestSemtrex?
Symbol: SEMTREX_VALUE_LITERAL,TREE;         Matches on the semantic type and the data values.
Symbol: SEMTREX_VALUE_LITERAL_NOT,TREE;     Matches on logical not of semantic type and data values
Symbol: SEMTREX_VALUE_SET,LIST;             List containing the values to match on
Symbol: SEMTREX_GROUP,SYMBOL;               Grouping                                 Ex: <...>operator
Symbol: SEMTREX_DESCEND,NULL_STRUCTURE;     
Symbol: SEMTREX_WALK,SEMTREX;
Symbol: SEMTREX_MATCH,INTEGER;              Returns result and sibling count.        Ex: {name:expr} (verify this is what it's supposed to do)
Symbol: SEMTREX_MATCH_CURSOR,NULL_STRUCTURE;   stores c pointer to tree node at start of match
Symbol: SEMTREX_MATCH_RESULTS,NULL_STRUCTURE;  In the FSA_ID, keeps track of which part matches so it can be referenced
Symbol: SEMTREX_MATCH_SYMBOL,SYMBOL;
Symbol: SEMTREX_MATCH_SIBLINGS_COUNT,INTEGER;  In the FSA_ID, it's the length of the match

Symbol: ASCII_CHAR,CHAR;
Symbol: ASCII_CHARS,LIST;

Symbol: RECEPTOR_XADDR,XADDR;               An Xaddr that points to a receptor
Symbol: FLUX,LIST;                          tree to hold all incoming and in process signals on the various aspects
Symbol: SCAPE_SPEC,TREE;
Symbol: ASPECTS,LIST;
Symbol: ASPECT_DEF,TREE;
Symbol: ASPECT_TYPE,BIT;
Symbol: CARRIER,INTEGER; //@todo fix to proper structure when we understand this  currently CARRIER is c pointer, but we have it set to an INTEGER so it prints in the tree debug dump
Symbol: ASPECT,INTEGER;
Symbol: SIGNALS,LIST;                       list of signals on an aspect in the flux
Symbol: SIGNAL,TREE;                        a signal on the flux.  It's first child is the contents of the signal
Symbol: ENVELOPE,LIST;
Symbol: BODY,TREE;
Symbol: LISTENERS,LIST;                     list of carrier/expectation/action tress that "listen" to changes on the flux
Symbol: LISTENER,SYMBOL;                    surface of the listener is the carrier symbol, and it has two children_ID, expectation semtrex and action code tree
Symbol: EXPECTATION,SEMTREX;                expectation is a semtrex (thus has one child which is the first part of the semtrex)
Symbol: ACTION,PROCESS;                     code tree_ID, which specifies the action to perform when an expectation's semtrex matches
Symbol: INTERPOLATE_SYMBOL,SYMBOL;          a place holder to indicate which symbol to insert into this part of the tree
Symbol: PROCESSES,LIST;
Symbol: PROCESS_CODING,TREE;
Symbol: PROCESS_NAME,CSTRING;
Symbol: PROCESS_INTENTION,CSTRING;
Symbol: INPUT,LIST;
Symbol: INPUT_SIGNATURE,TREE;
Symbol: INPUT_LABEL,CSTRING;
Symbol: SIGNATURE_STRUCTURE,STRUCTURE;
Symbol: OUTPUT_SIGNATURE,NULL_STRUCTURE;
Symbol: RUN_TREE,TREE;                     think about this as a stack frame and its code
Symbol: PARAM_REF,TREE_PATH;               used in a code tree as a reference to a parameter
Symbol: PARAMS,LIST;
Symbol: RESULT_SYMBOL,SYMBOL;
Symbol: REDUCTION_ERROR_SYMBOL,SYMBOL;

Symbol: PROTOCOLS,LIST;
Symbol: SEQUENCES,LIST;
#Symbol: SEQUENCE,LIST; /// @todo this should really be a structure be we don't have optional elements yet....
Symbol: STEP_SYMBOL,SYMBOL;
Symbol: STEPS,LIST;
Structure: SEQUENCE,1,STEP_SYMBOL; // this really should specify one or more step_symbols
Structure: PROTOCOL_STEP,3,EXPECTATION,PARAMS,ACTION;
Symbol: INTERACTIONS,LIST;
Symbol: INTERACTION,LIST; /// @todo this should really be a structure be we don't have optional elements yet....
Symbol: STEP,CSTRING;
Symbol: RESPONSE_STEPS,LIST;
Structure: PROTOCOL,2,STEPS,SEQUENCES;
Symbol: SCAPES,LIST;
Symbol: VM_HOST_RECEPTOR,RECEPTOR;
Symbol: CLOCK_RECEPTOR,RECEPTOR;
Symbol: COMPOSITORY,RECEPTOR;             receptor that holds available receptor packages for installation
Symbol: MANIFEST,TREE;                    configuration template to be filled out for the installation of a receptor
Symbol: MANIFEST_PAIR,LIST;
Symbol: MANIFEST_LABEL,CSTRING;           a label in the manifest to identify a binding
Symbol: MANIFEST_SPEC,SYMBOL;             a symbol to specify what type of data must be provided for a given manifest label
Symbol: RECEPTOR_PACKAGE,TREE;            a manifest, a symbol declaration tree, a structure definition tree_ID, and an identifier
Symbol: RECEPTOR_IDENTIFIER,INTEGER;      uuid that identifies receptors
Symbol: INSTALLED_RECEPTOR,TREE;          contains the installed receptor as well as state information (enabled,disabled_ID, etc..)
Symbol: ACTIVE_RECEPTORS,LIST;            List of currently active INSTALLED_RECEPTORS
Symbol: PENDING_SIGNALS,LIST;             list of signals pending to be sent by the VM_HOST
Symbol: BINDINGS,TREE;                    specifics that match a MANIFEST and allow a receptor to be installed
Symbol: BINDING_PAIR,LIST;                a pair that matches a MANIFEST_LABEL with a given binding

Symbol: YEAR,INTEGER;
Symbol: MONTH,INTEGER;
Symbol: DAY,INTEGER;
Symbol: HOUR,INTEGER;
Symbol: MINUTE,INTEGER;
Symbol: SECOND,INTEGER;
Structure: DATE,3,YEAR,MONTH,DAY;
Structure: TIME,3,HOUR,MINUTE,SECOND;
Symbol: TODAY,DATE;
Symbol: NOW,TIME;
Structure: TIMESTAMP,2,TODAY,NOW;
Symbol: TICK,TIMESTAMP;

Symbol: ERROR_LOCATION,TREE_PATH;
Structure: REDUCTION_ERROR,1,ERROR_LOCATION;
Symbol: ZERO_DIVIDE_ERR,REDUCTION_ERROR;
Symbol: TOO_FEW_PARAMS_ERR,REDUCTION_ERROR;
Symbol: TOO_MANY_PARAMS_ERR,REDUCTION_ERROR;
Symbol: SIGNATURE_MISMATCH_ERR,REDUCTION_ERROR;
Symbol: NOT_A_PROCESS_ERR,REDUCTION_ERROR;
Symbol: NOT_IN_SIGNAL_CONTEXT_ERR,REDUCTION_ERROR;
Symbol: INCOMPATIBLE_TYPE_ERR,REDUCTION_ERROR;
Symbol: UNIX_ERRNO_ERR,REDUCTION_ERROR;

Process: NOOP,"no-op",0,0;
Process: IF,"if",0,0;
Process: ADD_INT,"addition",0,0;
Process: SUB_INT,"subtract",0,0;
Process: MULT_INT,"multiply",0,0;
Process: DIV_INT,"divide",0,0;
Process: MOD_INT,"modulo",0,0;
Process: EQ_INT,"test equality",0,0;
Process: LT_INT,"test less than",0,0;
Process: GT_INT,"test greater than",0,0;
Process: LTE_INT,"test less than or equal",0,0;
Process: GTE_INT,"test greater than or equal",0,0;
Process: CONCAT_STR,"concatinate strings",0,0;
Process: RESPOND,"respond to signal",0,0;
Process: SEND,"send a signal",0,0;
Process: EXPECT_ACT,"block run tree until expectation met and then act",0,0;
Process: QUOTE,"quote a process so that it can be passed as a value",0,0;
Process: INTERPOLATE_FROM_MATCH,"interploate match result in place",0,0;
Process: RAISE,"raise reduction error",0,0;
Process: STREAM_READ,"read from a stream",0,0;
Process: STREAM_WRITE,"write to a stream",0,0;
Process: STREAM_AVAILABLE,"check a stream for data availability",0,0;
Process: REPLICATE,"replicate process",0,0;

Symbol: STX_TOKENS,LIST;
Symbol: STX_SL,NULL_STRUCTURE;
Symbol: STX_OP,NULL_STRUCTURE;
Symbol: STX_CP,NULL_STRUCTURE;
Symbol: STX_SET,NULL_STRUCTURE;
Symbol: STX_OS,NULL_STRUCTURE;
Symbol: STX_CS,NULL_STRUCTURE;
Symbol: STX_LABEL,CSTRING;
Symbol: STX_OG,CSTRING;
Symbol: STX_CG,NULL_STRUCTURE;
Symbol: STX_EQ,CSTRING;
Symbol: STX_NEQ,CSTRING;
Symbol: STX_WALK,NULL_STRUCTURE;
Symbol: STX_STAR,NULL_STRUCTURE;
Symbol: STX_PLUS,NULL_STRUCTURE;
Symbol: STX_Q,NULL_STRUCTURE;
Symbol: STX_OR,NULL_STRUCTURE;
Symbol: STX_COMMA,NULL_STRUCTURE;
Symbol: STX_EXCEPT,CSTRING;
Symbol: STX_NOT,NULL_STRUCTURE;
Symbol: STX_VAL_S,CSTRING;
Symbol: STX_VAL_C,CHAR;
Symbol: STX_VAL_I,INTEGER;
Symbol: STX_VAL_F,FLOAT;

Symbol: STX_SIBS,LIST;
Symbol: STX_CHILD,TREE;
Symbol: STX_POSTFIX,TREE;

Symbol: TREE_DELTA_PATH,TREE_PATH;
Symbol: TREE_DELTA_VALUE,TREE;
Symbol: TREE_DELTA_COUNT,INTEGER;
Structure: TREE_DELTA,3,TREE_DELTA_PATH,TREE_DELTA_VALUE,TREE_DELTA_COUNT;
Symbol: TREE_DELTA_ADD,TREE_DELTA;
Symbol: TREE_DELTA_REPLACE,TREE_DELTA;

########################################################################################
Context: TEST;

Symbol: TEST_INT_SYMBOL,INTEGER;
Symbol: TEST_INT_SYMBOL2,INTEGER;
Symbol: TEST_FLOAT_SYMBOL,FLOAT;
Symbol: TEST_STR_SYMBOL,CSTRING;
Symbol: TEST_TREE_SYMBOL,TREE;
Symbol: TEST_TREE_SYMBOL2,TREE;
Symbol: TEST_STREAM_SYMBOL,STREAM;
Symbol: TEST_NAME_SYMBOL,CSTRING;
Symbol: TEST_RECEPTOR_SYMBOL,RECEPTOR;
Symbol: TEST_ALPHABETIZE_SCAPE_SYMBOL,SCAPE;
