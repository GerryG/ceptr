########################################################################################
Context: SYS;

Structure: BIT,NULL_SYMBOL;
Structure: INTEGER,NULL_SYMBOL;
Structure: FLOAT,NULL_SYMBOL;
Structure: CHAR,NULL_SYMBOL;
Structure: CSTRING,NULL_SYMBOL;
Structure: SYMBOL,NULL_SYMBOL;
Structure: ENUM,NULL_SYMBOL;
Structure: TREE_PATH,NULL_SYMBOL;
Structure: XADDR,NULL_SYMBOL;
Structure: LIST,NULL_SYMBOL;
Structure: SURFACE,NULL_SYMBOL;
Structure: TREE,NULL_SYMBOL;
Structure: RECEPTOR,NULL_SYMBOL;
Structure: PROCESS,NULL_SYMBOL;
Structure: STRUCTURE,NULL_SYMBOL;
Structure: SCAPE,NULL_SYMBOL;
Structure: SEMTREX,NULL_SYMBOL;
Structure: STREAM,NULL_SYMBOL;
Structure: UUID,NULL_SYMBOL;
Structure: BLOB,NULL_SYMBOL;

Declare: STRUCTURES,SYMBOLS,PROCESSES,PROTOCOOLS,SCAPES,ASPECTS;
Symbol: DEFINITIONS,[*(STRUCTURES,SYMBOLS,PROCESSES,*PROTOCOOLS,*SCAPES,*ASPECTS)];

Declare: STRUCTURE_SYMBOL,STRUCTURE_SEQUENCE,STRUCTURE_SYMBOL_SET,STRUCTURE_OR,STRUCTURE_ZERO_OR_MORE,STRUCTURE_ONE_OR_MORE,STRUCTURE_ZERO_OR_ONE;
Structure: STRUCTURE_DEF,{STRUCTURE_SYMBOL,STRUCTURE_SEQUENCE,STRUCTURE_SYMBOL_SET,STRUCTURE_OR,STRUCTURE_ZERO_OR_MORE,STRUCTURE_ONE_OR_MORE,STRUCTURE_ZERO_OR_ONE};
Symbol: STRUCTURE_LABEL,CSTRING;
Symbol: STRUCTURE_DEFINITION,[(STRUCTURE_LABEL,STRUCTURE_DEF)];
Symbol: STRUCTURES,[*STRUCTURE_DEFINITION];
Symbol: STRUCTURE_SEQUENCE,[+STRUCTURE_DEF];
Symbol: STRUCTURE_SYMBOL_SET,[+STRUCTURE_SYMBOL];
Symbol: STRUCTURE_SYMBOL,SYMBOL;
Symbol: STRUCTURE_OR,[(STRUCTURE_DEF,STRUCTURE_DEF)];
Symbol: STRUCTURE_ZERO_OR_MORE,STRUCTURE_DEF;
Symbol: STRUCTURE_ONE_OR_MORE,STRUCTURE_DEF;
Symbol: STRUCTURE_ZERO_OR_ONE,STRUCTURE_DEF;

Symbol: SYMBOL_STRUCTURE,STRUCTURE;
Symbol: SYMBOL_LABEL,CSTRING;
Symbol: SYMBOL_DECLARATION,[(SYMBOL_LABEL,SYMBOL_STRUCTURE)];
Symbol: SYMBOLS,[*SYMBOL_DECLARATION];

Symbol: BOOLEAN,BIT;
Symbol: SEMTREX_MATCH_PATH,TREE_PATH;       Path to symbol matched by semtrex
Symbol: SEMTREX_SYMBOL,SYMBOL;              Symbols in the literal set
Symbol: SEMTREX_SYMBOL_SET,[+SEMTREX_SYMBOL];
Structure: STX_SYMBOL_OR_SYMBOL_SET,|[SEMTREX_SYMBOL|SEMTREX_SYMBOL_SET];
Symbol: SEMTREX_SYMBOL_LITERAL,STX_SYMBOL_OR_SYMBOL_SET;        This system symbol matches on the semantic type.
Symbol: SEMTREX_SYMBOL_LITERAL_NOT,STX_SYMBOL_OR_SYMBOL_SET;    Match any symbol or value of the node except.
Symbol: SEMTREX_SEQUENCE,[+SEMTREX];        Match on a sequence of child nodes which are any valid semtrex's.  Ex: comma separated nodes
#///@todo, the structure really should be something like SEMTREX_PAIR
Symbol: SEMTREX_OR,[(SEMTREX,SEMTREX)];     Logical OR between two Semtrex expressions.      Ex: |
Symbol: SEMTREX_NOT,SEMTREX;                Logical ~ between of a Semtrex expressions.      Ex: ~
Symbol: SEMTREX_SYMBOL_ANY,NULL_STRUCTURE;  Match any symbol or value of the node.           Ex: .
Symbol: SEMTREX_ZERO_OR_MORE,SEMTREX;       Requires one child Semtrex and matches on zero or more of that Semtrex.  Ex: /0/TestSemtrex*
Symbol: SEMTREX_ONE_OR_MORE,SEMTREX;        Requires one child Semtrex and matches on one or more of that Semtrex.   Ex: /0/TestSemtrex+
Symbol: SEMTREX_ZERO_OR_ONE,SEMTREX;        Requires one child Semtrex and matches on zero or one of that Semtrex.   Ex: /0/TestSemtrex?
Symbol: SEMTREX_VALUE_LITERAL,TREE;         Matches on the semantic type and the data values.
Symbol: SEMTREX_VALUE_LITERAL_NOT,TREE;     Matches on logical not of semantic type and data values
Symbol: SEMTREX_VALUE_SET,LIST;             List containing the values to match on
Symbol: SEMTREX_GROUP,SYMBOL;               Grouping                                 Ex: <...>operator
Symbol: SEMTREX_DESCEND,NULL_STRUCTURE;     
Symbol: SEMTREX_WALK,SEMTREX;
Symbol: SEMTREX_MATCH,INTEGER;              Returns result and sibling count.        Ex: {name:expr} (verify this is what it's supposed to do)
Symbol: SEMTREX_MATCH_CURSOR,NULL_STRUCTURE;   stores c pointer to tree node at start of match
Symbol: SEMTREX_MATCH_RESULTS,NULL_STRUCTURE;  In the FSA_ID, keeps track of which part matches so it can be referenced
Symbol: SEMTREX_MATCH_SYMBOL,SYMBOL;
Symbol: SEMTREX_MATCH_SIBLINGS_COUNT,INTEGER;  In the FSA_ID, it's the length of the match

Symbol: ASCII_CHAR,CHAR;
Symbol: ASCII_CHARS,[+ASCII_CHAR];

Symbol: RECEPTOR_XADDR,XADDR;               An Xaddr that points to a receptor
Symbol: ASPECT,INTEGER;
Symbol: FLUX,LIST;                           tree to hold all incoming and in process signals on the various aspects
Symbol: SCAPE_SPEC,TREE;
Symbol: ASPECTS,LIST;
Symbol: ASPECT_DEF,TREE;
Symbol: ASPECT_TYPE,BIT;
Symbol: CARRIER,SYMBOL;
Symbol: BODY,TREE;
Symbol: SIGNAL_UUID,UUID;
Symbol: RECEPTOR_ADDRESS,INTEGER;
Symbol: ENVELOPE,[(RECEPTOR_ADDRESS,RECEPTOR_ADDRESS,ASPECT,CARRIER,SIGNAL_UUID)];
Symbol: SIGNAL,[(ENVELOPE,BODY)];                        a signal on the flux.  It's first child is the contents of the signal
Symbol: SIGNALS,[*SIGNAL];                  list of signals on an aspect in the flux
Symbol: PENDING_SIGNALS,[*SIGNAL];               list of signals pending to be sent by the VM_HOST
Symbol: RESPONSE_CODE_PATH,TREE_PATH;
Symbol: PROCESS_IDENT,INTEGER;
Symbol: PENDING_RESPONSE,[(SIGNAL_UUID,CARRIER,PROCESS_IDENT,RESPONSE_CODE_PATH)];
Symbol: PENDING_RESPONSES,[*PENDING_RESPONSE];
Symbol: RESPONSE_CARRIER,SYMBOL;            expected carrier for the response to a signal
Symbol: LISTENER,SYMBOL;                    surface of the listener is the carrier symbol, and it has two children_ID, expectation semtrex and action code tree
Symbol: LISTENERS,[*LISTENER];                     list of carrier/expectation/action tress that "listen" to changes on the flux
Symbol: EXPECTATION,SEMTREX;                expectation is a semtrex (thus has one child which is the first part of the semtrex)
Symbol: ACTION,PROCESS;                     code tree_ID, which specifies the action to perform when an expectation's semtrex matches
Symbol: INTERPOLATE_SYMBOL,SYMBOL;          a place holder to indicate which symbol to insert into this part of the tree
Symbol: PROCESS_NAME,CSTRING;
Symbol: PROCESS_INTENTION,CSTRING;
Declare: PROCESS_SIGNATURE;
Symbol: PROCESS_CODING,[(PROCESS_NAME,PROCESS_INTENTION,PROCESS,PROCESS_SIGNATURE)];
Symbol: PROCESSES,[*PROCESS_CODING];

Symbol: SIGNATURE_LABEL,CSTRING;
Symbol: SIGNATURE_STRUCTURE,STRUCTURE;      the structure that would match
Symbol: SIGNATURE_SYMBOL,SYMBOL;            the symbol that would match
Symbol: SIGNATURE_PROCESS,SYMBOL;           the output signature of the process
Symbol: SIGNATURE_PASSTHRU,NULL_STRUCTURE;
Symbol: SIGNATURE_ANY,NULL_STRUCTURE;
Symbol: SIGNATURE_OPTIONAL,NULL_STRUCTURE;
Symbol: SIGNATURE_OUTPUT_TYPE,[{SIGNATURE_STRUCTURE,SIGNATURE_SYMBOL,SIGNATURE_PROCESS,SIGNATURE_PASSTHRU}];           the semantic type expected as result i.e. either PROCESS/STRUCTURE/SYMBOL or PASSTHRU when the type comes from a reduction of a SIGNATURE_ANY
Structure: SIGNATURE_SEMANTIC_VARIANTS,{SIGNATURE_STRUCTURE,SIGNATURE_SYMBOL,SIGNATURE_PROCESS,SIGNATURE_ANY};
Symbol: SIGNATURE_INPUT_TYPE,[(SIGNATURE_SEMANTIC_VARIANTS,?SIGNATURE_OPTIONAL)];    the semantic type that would expected as input i.e. either PROCESS/STRUCTURE/SYMBOL
Symbol: INPUT_SIGNATURE,[(SIGNATURE_LABEL,SIGNATURE_INPUT_TYPE)];
Symbol: OUTPUT_SIGNATURE,[(SIGNATURE_LABEL,SIGNATURE_OUTPUT_TYPE)];
Symbol: PROCESS_SIGNATURE,[(OUTPUT_SIGNATURE,*INPUT_SIGNATURE)];

Symbol: RUN_TREE,TREE;                     think about this as a stack frame and its code
Symbol: PARAM_REF,TREE_PATH;               used in a code tree as a reference to a parameter
Symbol: PARAMS,LIST;
Symbol: RESULT_SYMBOL,SYMBOL;
Symbol: REDUCTION_ERROR_SYMBOL,SYMBOL;

Symbol: PROTOCOLS,LIST;
Symbol: SEQUENCES,LIST;
Symbol: STEP_SYMBOL,SYMBOL;
Symbol: STEPS,LIST;
Structure: SEQUENCE,STEP_SYMBOL; /// @todo #8 this really should specify one or more step_symbols
Structure: PROTOCOL_STEP,EXPECTATION,PARAMS,ACTION;
Symbol: INTERACTION,LIST; /// @todo #8 this should really be a structure be we don't have optional elements yet....
Symbol: INTERACTIONS,[+INTERACTION];
Symbol: STEP,CSTRING;
Symbol: RESPONSE_STEPS,LIST;
Structure: PROTOCOL,STEPS,SEQUENCES;
Symbol: SCAPES,LIST;
Symbol: MANIFEST,TREE;                    configuration template to be filled out for the installation of a receptor
Symbol: MANIFEST_PAIR,LIST;
Symbol: MANIFEST_LABEL,CSTRING;           a label in the manifest to identify a binding
Symbol: MANIFEST_SPEC,SYMBOL;             a symbol to specify what type of data must be provided for a given manifest label
Symbol: RECEPTOR_PACKAGE,TREE;            a manifest, a symbol declaration tree, a structure definition tree_ID, and an identifier
Symbol: RECEPTOR_IDENTIFIER,INTEGER;      uuid that identifies receptors
Symbol: INSTALLED_RECEPTOR,TREE;          contains the installed receptor as well as state information (enabled,disabled_ID, etc..)
Symbol: BINDINGS,TREE;                    specifics that match a MANIFEST and allow a receptor to be installed
Symbol: BINDING_PAIR,LIST;                a pair that matches a MANIFEST_LABEL with a given binding

Symbol: RECEPTOR_ELAPSED_TIME,INTEGER;
Symbol: RECEPTOR_STATE,[(?RECEPTOR_ELAPSED_TIME)];

Structure: RECEPTOR_DEF,DEFINITIONS,ASPECTS,FLUX,RECEPTOR_STATE,PENDING_SIGNALS,PENDING_RESPONSES;

Symbol: SERIALIZED_RECEPTOR,BLOB;

Symbol: VM_HOST_RECEPTOR,RECEPTOR;
Symbol: ACTIVE_RECEPTORS,[*RECEPTOR_XADDR];
Symbol: VM_HOST_STATE,[(ACTIVE_RECEPTORS)];
Symbol: CLOCK_RECEPTOR,RECEPTOR;
Symbol: COMPOSITORY,RECEPTOR;         receptor that holds available receptor packages for installation

Symbol: YEAR,INTEGER;
Symbol: MONTH,INTEGER;
Symbol: DAY,INTEGER;
Symbol: HOUR,INTEGER;
Symbol: MINUTE,INTEGER;
Symbol: SECOND,INTEGER;
Structure: DATE,YEAR,MONTH,DAY;
Structure: TIME,HOUR,MINUTE,SECOND;
Symbol: TODAY,DATE;
Symbol: NOW,TIME;
Structure: TIMESTAMP,TODAY,NOW;
Symbol: TICK,TIMESTAMP;
Symbol: CLOCK_TELL_TIME,NULL_STRUCTURE;

Symbol: ERROR_LOCATION,TREE_PATH;
Structure: REDUCTION_ERROR,ERROR_LOCATION;
Symbol: ZERO_DIVIDE_ERR,REDUCTION_ERROR;
Symbol: TOO_FEW_PARAMS_ERR,REDUCTION_ERROR;
Symbol: TOO_MANY_PARAMS_ERR,REDUCTION_ERROR;
Symbol: SIGNATURE_MISMATCH_ERR,REDUCTION_ERROR;
Symbol: NOT_A_PROCESS_ERR,REDUCTION_ERROR;
Symbol: NOT_IN_SIGNAL_CONTEXT_ERR,REDUCTION_ERROR;
Symbol: INCOMPATIBLE_TYPE_ERR,REDUCTION_ERROR;
Symbol: UNIX_ERRNO_ERR,REDUCTION_ERROR;
Symbol: DEAD_STREAM_READ_ERR,REDUCTION_ERROR;

Process: NOOP,"no-op","result",SIGNATURE_STRUCTURE,TREE,"do",SIGNATURE_ANY,NULL_STRUCTURE,0;   this process reduces to it's single "do" parameter
Process: IF,"if","result",SIGNATURE_PASSTHRU,NULL_STRUCTURE,"condition",SIGNATURE_PROCESS,BOOLEAN,"then",SIGNATURE_ANY,NULL_STRUCTURE,"else",SIGNATURE_OPTIONAL,SIGNATURE_ANY,NULL_STRUCTURE,0;  this is a traditional "if" process that reduces conditionally to either the "then" or the "else" parameter depending on the value of the "condition" parameter.
Process: ADD_INT,"addition","sum",SIGNATURE_STRUCTURE,INTEGER,"augend",SIGNATURE_STRUCTURE,INTEGER,"addend",SIGNATURE_STRUCTURE,INTEGER,0;
Process: SUB_INT,"subtract","difference",SIGNATURE_STRUCTURE,INTEGER,"minuend",SIGNATURE_STRUCTURE,INTEGER,"subtrahend",SIGNATURE_STRUCTURE,INTEGER,0;
Process: MULT_INT,"multiply","product",SIGNATURE_STRUCTURE,INTEGER,"multiplicand",SIGNATURE_STRUCTURE,INTEGER,"multiplier",SIGNATURE_STRUCTURE,INTEGER,0;
Process: DIV_INT,"divide","quotient",SIGNATURE_STRUCTURE,INTEGER,"dividend",SIGNATURE_STRUCTURE,INTEGER,"divisor",SIGNATURE_STRUCTURE,INTEGER,0;
Process: MOD_INT,"modulo","remainder",SIGNATURE_STRUCTURE,INTEGER,"dividend",SIGNATURE_STRUCTURE,INTEGER,"divisor",SIGNATURE_STRUCTURE,INTEGER,0;
Process: EQ_INT,"test equality","result",SIGNATURE_STRUCTURE,TREE,0;
Process: LT_INT,"test less than","result",SIGNATURE_STRUCTURE,TREE,0;
Process: GT_INT,"test greater than","result",SIGNATURE_STRUCTURE,TREE,0;
Process: LTE_INT,"test less than or equal","result",SIGNATURE_STRUCTURE,TREE,0;
Process: GTE_INT,"test greater than or equal","result",SIGNATURE_STRUCTURE,TREE,0;
Process: CONCAT_STR,"concatinate strings","result",SIGNATURE_STRUCTURE,TREE,0;
Process: RESPOND,"respond to signal","result",SIGNATURE_STRUCTURE,TREE,0;
Process: SEND,"send a signal","response",SIGNATURE_STRUCTURE,TREE,0;
Process: EXPECT_ACT,"block run tree until expectation met and then act","result",SIGNATURE_STRUCTURE,TREE,0;
Process: QUOTE,"quote a process so that it can be passed as a value","result",SIGNATURE_STRUCTURE,TREE,0;
Process: INTERPOLATE_FROM_MATCH,"interploate match result in place","result",SIGNATURE_STRUCTURE,TREE,0;
Process: RAISE,"raise reduction error","result",SIGNATURE_STRUCTURE,TREE,0;
Process: STREAM_READ,"read from a stream","result",SIGNATURE_STRUCTURE,TREE,0;
Process: STREAM_WRITE,"write to a stream","result",SIGNATURE_STRUCTURE,TREE,0;
Process: STREAM_ALIVE,"check a stream is alive for reading","result",SIGNATURE_STRUCTURE,TREE,0;
Process: ITERATE,"iterate a process","result",SIGNATURE_PASSTHRU,NULL_STRUCTURE,"condtion",SIGNATURE_PROCESS,BOOLEAN,"do",SIGNATURE_ANY,NULL_STRUCTURE,0;                     this process checks the structure of the result of the "condition" param, if it's a BOOLEAN, it treats the iteration as a while loop and iterates until the BOOLEAN is false; if it's an INTEGER it treats the iteration as repeat loop and iterates as many times as the value of the INTEGER
Process: LISTEN,"plant a listener","result",SIGNATURE_STRUCTURE,TREE,0;

Symbol: STX_TOKENS,LIST;
Symbol: STX_SL,NULL_STRUCTURE;
Symbol: STX_OP,NULL_STRUCTURE;
Symbol: STX_CP,NULL_STRUCTURE;
Symbol: STX_SET,NULL_STRUCTURE;
Symbol: STX_OS,NULL_STRUCTURE;
Symbol: STX_CS,NULL_STRUCTURE;
Symbol: STX_LABEL,CSTRING;
Symbol: STX_OG,CSTRING;
Symbol: STX_CG,NULL_STRUCTURE;
Symbol: STX_EQ,CSTRING;
Symbol: STX_NEQ,CSTRING;
Symbol: STX_WALK,NULL_STRUCTURE;
Symbol: STX_STAR,NULL_STRUCTURE;
Symbol: STX_PLUS,NULL_STRUCTURE;
Symbol: STX_Q,NULL_STRUCTURE;
Symbol: STX_OR,NULL_STRUCTURE;
Symbol: STX_COMMA,NULL_STRUCTURE;
Symbol: STX_EXCEPT,CSTRING;
Symbol: STX_NOT,NULL_STRUCTURE;
Symbol: STX_VAL_S,CSTRING;
Symbol: STX_VAL_C,CHAR;
Symbol: STX_VAL_I,INTEGER;
Symbol: STX_VAL_F,FLOAT;

Symbol: STX_SIBS,LIST;
Symbol: STX_CHILD,TREE;
Symbol: STX_POSTFIX,TREE;

Symbol: TREE_DELTA_PATH,TREE_PATH;
Symbol: TREE_DELTA_VALUE,TREE;
Symbol: TREE_DELTA_COUNT,INTEGER;
Structure: TREE_DELTA,TREE_DELTA_PATH,TREE_DELTA_VALUE,TREE_DELTA_COUNT;
Symbol: TREE_DELTA_ADD,TREE_DELTA;
Symbol: TREE_DELTA_REPLACE,TREE_DELTA;


########################################################################################
Context: LOCAL;

Symbol: LINE,CSTRING;                           text lines from unix streams

#defs for shell receptor
Symbol: VERB,CSTRING;
Symbol: COMMAND_PARAMETER,CSTRING;
Structure: COMMAND,(VERB,*COMMAND_PARAMETER);
Symbol: SHELL_COMMAND,COMMAND;

########################################################################################
Context: TEST;

Symbol: TEST_INT_SYMBOL,INTEGER;
Symbol: TEST_INT_SYMBOL2,INTEGER;
Symbol: TEST_FLOAT_SYMBOL,FLOAT;
Symbol: TEST_STR_SYMBOL,CSTRING;
Symbol: TEST_TREE_SYMBOL,TREE;
Symbol: TEST_TREE_SYMBOL2,TREE;
Symbol: TEST_STREAM_SYMBOL,STREAM;
Symbol: TEST_NAME_SYMBOL,CSTRING;
Symbol: TEST_RECEPTOR_SYMBOL,RECEPTOR;
Symbol: TEST_ALPHABETIZE_SCAPE_SYMBOL,SCAPE;
