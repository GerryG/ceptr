;#CEPTR Null Protocol
((:id protocol-id) (:envelope grammar) (:body stream)))

;VM Host Null Protocol (default protocol for bootstrapping or serializing/restarting)
((^id _NULL_) ;or just _NULL_
 (^envelope
         :handlers (list +(:handler-spec
                                     (map :address int
                                          :name string
                                          :data (map
                                                 :code ceptr-bytecode,
                                                 :aspects (list *(:aspect (map :id int :name string :code bytecode :protocol grammar)))
                                                 :initialization bytecode or data? ))))
         :bindings (list *(map (:receptor-aspect (pair int int) :receptor-aspect (pair int int))))
         :manifest (map *(:macro-name string :macro-value form) ))
 (^body
         (^handlers (:address _NULL_ :name "Address-Scape" :data (:code [?????] :aspects [CRUD] :init [hash of key:value pairs]))
                    (:address 1 :name "Processing" ...)
                    (:address 2 :name "Memory" ... )
                    (:address 3 :name "FileSystem" ...)
                    (...)
                    )
         (^bindings )
         (^manifest ))
 )

;; Boot sequence:
;; # instantiate handler-handler and boot-loader
;; # read body of default or serialized vm signal/message and
;; instantiate handlers

(handler-handler ^uses-VMHOST-null-protocol
 ;; - identify resource to internal ceptr world
 ;; - bind it to os resource
 ;; - expose aspects as protocols (register in a protocol scape)
 ;; - instantiate handlers as a chunk of code in a VP using the VPhandler
 ;;   VPhandler launch has to be hard-coded.
 )

(_NULL_
 (^envelope
  )
 (^body
  ))
(process-handler
 ;; # connects virtual processors to OS processes/threads
 ;;
 ;; Data Channel
 ;; - proces input-output pipes

 ;; Control Channel
 ;; - spawn/spspend/kill bytecode evaluators
 ;; - watch for hung processes
 ;; - manage priority of process

 ;; Receptor Channel?
 ;; - create ceptr addresses for a receptor in an existence scape
 ;; - establishes and switches processing contexts for bytecode
 ;;   blocks.
 ;; - ma
 ;; - actually runs the code and does process scheduling etc.

 )

(persistence-handler
 ;; - does the equivalent of virtual memory paging for receptors and
 ;; their data

 
 )
